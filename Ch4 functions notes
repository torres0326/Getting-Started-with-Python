=========================================================================

# python functions

# there are two kinds of functions in python
  "built-in functions" that are provided as part of python
  - input(), type(), float(), int()...
  "functions that we define ourselves" and then use
# we treat the built-in function names as "new reserved words"
  (i.e., we avoid them as variable names)
  
=========================================================================

# function definition

# In python a function is some reusable code that takes arguments
  as input, does some computation, and then returns a result or results 
# we define a function using the def reserved words
# we call/invoke the function by using the function name, pare
  and arguments in an expression
  
# a function is some stored code that we use. a function takes some input
  and produces an output
  
=========================================================================

# building our own functions

# we create a new function using the "def" keyword followed by optional 
  parameters in parentheses
# we indent the body of the function
# this defines the function but does not execute the body of the function

=========================================================================

# definitions and uses

# once we have defined a function, we can call (or invoke) it as many 
  times as we like
# this is the store and reuse pattern

=========================================================================

# arguments

# an argument is a value we pass into the functions as its input when we 
  call the function
# we use arguments so we can direct the function to do different kinds of 
  work when we call it at different times
# we put the arguments in parentheses after the name of the function

=========================================================================

# parameters 

# a parameter is a variable which we use in the function definition. 
  it's a "handle" that allows the code in the function to access the
  arguments for a particular function invocation

=========================================================================

# return values 

# often a function will take its arguments, do some computation, and 
  return a value to be used as the value of the function call in the 
  calling expression. the return keyword is used for this.

=========================================================================
# return value

# a "fruitful" function is one that produces a result (or return value)
# the return statement ends the function execution and "sends back" the
  result of the function

=========================================================================

# multiple parameters/arguments

# we can define more than one parameter in the function definition
# we simply add more arguments when we call the function
# we match the number and order of arguments parameters

=========================================================================

# void (non-fruitful) functions

# when a function does not return a value, we call it a "void" function
# functions that return values are "fruitful" functions 
# void functions are "not fruitful"

=========================================================================

# to function or not to function...

# organize your code into "paragraph" - capture a complete thought and 
  "name it"
# don't repeat yourself - make it work once and then reuse it
# if something gets too long or complex, break it up into logical chunks
  and put those chunks in functions
# make a library of common stuff that you do over and over - perhaps
  share this with your friends...

=========================================================================

# summary

# functions                        # arguments
# built-in functions               # results (fruitful functions)
  type conversion (int, float)     # void (non-fruitful) functions
  string conversions               # why use functions?
# parameters


